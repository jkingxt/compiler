#include "stdio.h"
#include "syntax.tab.h"
#include <stdlib.h>
#include <string.h>
typedef struct Type_* Type;
typedef struct FieldList_* FieldList;



struct TreeNode{
		char name[20];
		int lineno;
		int depth;
		int value_int;//int型数的值
		char value_str[20];//id的名字或者type类型
		int type;//判断是否为空

		/*一个节点的操作源，-1代表不关注，0代表基本变量定义，1代表结构体定义；2代表结构体成员定义，3代表函数参数定义，4代表函数体定义，5代表函数体声明，6代表使用变量，7代表函数调用,

		*/
		int srcop;
		Type real_type;//用来数组确定真实属性
		Type return_type;//综合属性，记录return返回类型
		Type syn_type;//综合属性，记录总体类型
		struct TreeNode* neighbours;
		struct TreeNode* children;
	};
struct Type_
	{
	  enum { basic, array, structure, function, variable } kind;
	  union
	  {
		// 基本类型
		int basic;
		// 数组类型信息包括元素类型与数组大小构成
		struct { Type elem; int size; } array;
		// 结构体类型信息是一个链表
		FieldList structure;
		FieldList function;
		FieldList variable;
	  } u;
	};

struct FieldList_
	{
	  char* name;    // 域的名字
	  Type type;      // 域的类型
	  int func_dec;    //函数是否被定义 0未定义，1定义
	  int func_lineno;
	  char inter_name[20];
	  FieldList tail;    // 下一个域
	};
FieldList pFunc;

typedef struct Operand_* Operand;
struct Operand_ {
	enum { VARIABLE, CONSTANT, CONSTANT_FLOAT, ADDRESS, REFERENCE, GOTOOP, LABELOP, RETURNOP} kind;
	union {
		char ID[20];//这个有待考虑
		int value;
		//if操作数
		//其他
	} u;
};

struct ArgList{
	Operand op;
	struct ArgList* next;
};

struct InterCode
{
	enum { ASSIGN_, ADD_, SUB_, MUL_, DIV_, MINUS_, IF_, GOTO_, LABEL_, RETURN_, READ_, WRITE_, ARG_, CALL_, DEC_, FUNCTION_, PARAM_, NONE_} kind;
	union {
		struct { Operand right, left; } assign;
		struct { Operand result, op1, op2; } binop;
		struct { Operand result, op1; } sinop;
		struct { Operand op1, op2, label; char op_type[20]; } ifcode;
		struct { Operand label; } gotocode;//GOTO label
		struct { Operand label; } labelcode;//LABEL label
		struct { Operand r; } returncode;
		struct { Operand rd; } read;
		struct { Operand wr; } write;
		struct { Operand argument; } arg;
		struct { Operand left, function; } call;
		struct { Operand space; int size; } dec;
		struct { char func[20]; } function;
		struct { Operand op; } param;
		//其他
	} u;
} ;

struct InterCodes {
	struct InterCode code; 
	struct InterCodes *prev, *next; 
};

void printOperand(Operand op);
Operand new_temp(){
	static int used_no = 0;
	Operand newop = (Operand)malloc(sizeof(struct Operand_));
	memset(newop,0,sizeof(struct Operand_));
	sprintf(newop->u.ID,"t%d",used_no);
	used_no++;
	return newop;
}

Operand new_label(){
	static int used_label = 1;
	Operand newLabel = (Operand)malloc(sizeof(struct Operand_));
	memset(newLabel,0,sizeof(struct Operand_));
	sprintf(newLabel->u.ID,"t%d",used_label);
	used_label++;
	return newLabel;
}

void printCode(struct InterCodes *root){

	while (root != NULL){
		switch (root->code.kind){
			case ASSIGN_:
						printOperand(root->code.u.assign.left);
						printf(":= ");
						printOperand(root->code.u.assign.right);
						printf("\n");
						break;
			case ADD_:
						printOperand(root->code.u.binop.result);
						printf(":= ");
						printOperand(root->code.u.binop.op1);
						printf("+ ");
						printOperand(root->code.u.binop.op2);
						printf("\n");
						break;
			case SUB_:
						printOperand(root->code.u.binop.result);
						printf(":= ");
						printOperand(root->code.u.binop.op1);
						printf("- ");
						printOperand(root->code.u.binop.op2);
						printf("\n");
						break;
			case MUL_:
						printOperand(root->code.u.binop.result);
						printf(":= ");
						printOperand(root->code.u.binop.op1);
						printf("* ");
						printOperand(root->code.u.binop.op2);
						printf("\n");
						break;
			case DIV_:
						printOperand(root->code.u.binop.result);
						printf(":= ");
						printOperand(root->code.u.binop.op1);
						printf("/ ");
						printOperand(root->code.u.binop.op2);
						printf("\n");
						break;
			case MINUS_:;
						printf("occur MINUS \n");
						break;
			case IF_:
						printf("IF ");
						printOperand(root->code.u.ifcode.op1);
						printf("%s ",root->code.u.ifcode.op_type);
						printOperand(root->code.u.ifcode.op2);
						printf(" GOTO ");
						printOperand(root->code.u.ifcode.label);
						printf("\n");
						break;
			case GOTO_:
						printf("GOTO ");
						printOperand(root->code.u.gotocode.label);
						printf("\n");
						break;
			case LABEL_:
						printf("LABEL ");
						printOperand(root->code.u.labelcode.label);
						printf("\n");
						break;
			case RETURN_:
						printf("RETURN ");
						printOperand(root->code.u.returncode.r);
						printf("\n");
						break;
			case READ_:
						printf("READ ");
						printOperand(root->code.u.read.rd);
						printf("\n");
						break;
			case WRITE_:
						printf("WRITE ");
						printOperand(root->code.u.write.wr);
						printf("\n");
						break;
			case ARG_:
						printf("ARG  ");
						printOperand(root->code.u.arg.argument);
						break;
			case CALL_:
						printOperand(root->code.u.call.left);
						printf(":= CALL ");
						printOperand(root->code.u.call.function);
						printf("\n");
						break;
			case DEC_:
						printf("DEC ");
						printOperand(root->code.u.dec.space);
						printf("%d ",root->code.u.dec.size);
						printf("\n");
						break;
			case FUNCTION_:
						printf("FUNCTION ");
						printf("%s :",root->code.u.function.func);
						printf("\n");
						break;
			case PARAM_:
						printf("PARAM ");
						printOperand(root->code.u.param.op);
						printf("\n");
			case NONE_:
						break;
			default : printf("undifined  op\n");
		}
		root = root->next;
	}
}

void printOperand(Operand op){
	switch (op->kind){
		case VARIABLE:
						printf("%s ",op->u.ID);
						break;
		case CONSTANT:
						printf("#%d ",op->u.value);
						break;
		case ADDRESS:
						printf("&%s ",op->u.ID);
						break;
		case REFERENCE:
						printf("*%s ",op->u.ID);
						break;
		case GOTOOP:
						printf("%s ",op->u.ID);
						break;
		case LABELOP:
						printf("%s ",op->u.ID);
						break;
		case RETURNOP:
						printf("%s ",op->u.ID);
						break;
	}
}


int dec_size(Type item){
	if (item->kind == basic)
		return 4;
	else if (item->kind == array)
		return item->u.array.size * dec_size(item->u.array.elem);
	else if (item->kind == variable ){
		int total = 0;
		FieldList p = item->u.variable;
		while ( p != NULL){
			total += dec_size(p->type);
			p = p->tail;
		}
		return total;
	}
	return -1;
}



int index_size(FieldList father,char *memberName){
	int index = 0;
	while (strcmp(father->name,memberName) != 0){
			index +=  dec_size(father->type);
			father = father->tail;
		}
	return index;
}

int  newlookupTable(char *name,FieldList *t,int way){
	if (lookupTable(name,t,way) == 1 )
			return 1;
	else{
			FieldList temp = pFunc->type->u.function->tail;
			while(temp != NULL){
				if(strcmp(temp->name,name) == 0){
					*t = temp;
					return 0;
				}
				temp = temp->tail;
			}

		}
	return -1;
}
